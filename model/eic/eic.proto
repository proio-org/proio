syntax = "proto2";
package proio.model.eic;
option go_package = "eic";
option java_package = "proio.model";
option java_outer_classname = "Eic";

////// TRUTH LEVEL DATA MODEL MESSAGES //////

message Particle {
    // ProIO entry identifiers that point to parent Particles
    repeated uint64 parent = 1 [packed=true];
    // ProIO entry identifiers that point to child Particles
    repeated uint64 child = 2 [packed=true];
    // PDG code
    optional sint32 pdg = 3;
    // position in mm and time in ns
    optional XYZTD vertex = 4;
    // momentum in GeV
    optional XYZF p = 9;
    // mass in GeV
    optional float mass = 10;
    // charge in units of e
    optional float charge = 7;
    optional XYZF spin = 8;

    // DEPRECATED
    optional XYZD p_double = 5;
    optional double mass_double = 6;
}

////// SIMULATION LEVEL DATA MODEL MESSAGES //////

message SimHit {
    // optional ID to circumvent volume lookup from global position during
    // digitization
    optional uint64 volumeid = 1;
    // spatial in mm and time in ns
    optional XYZTD globalprepos = 2;
    // spatial in mm and time in ns
    optional XYZTD globalpostpos = 3;
    // energy in GeV
    optional float edep = 4;
    // "particle" is a ProIO entry identifier that points to the Particle
    // responsible for this hit.
    optional uint64 particle = 5;
}

////// OBSERVATION LEVEL DATA MODEL MESSAGES //////

message EnergyDep {
    // mean and noise are in units of GeV
    optional float mean = 1;
    // sigma value for normally-distributed noise
    optional float noise = 2;
    // Multiple possible positions can be specified.
    repeated ObservedPos pos = 3 [packed=true];
    // "source"s are ProIO entry identifiers that may point to SimHits,
    // Particles, or specialized raw data objects.
    repeated uint64 source = 4 [packed=true];
}

////// RECONSTRUCTION LEVEL DATA MODEL MESSAGES //////

// symmetric kernel (or similarity) matrix between observations - This is used
// as input to Kalman filtering and other clustering techniques.
message KernelMatrix {
    // ordered list of observation ids that maps matrix indices to observations
    repeated uint64 observation = 1 [packed=true];
    // flattened upper-triangular components of matrix - If the observation
    // field has length n, the kflat field must have length (n+1)*n/2.  The
    // flattening procedure must go row-by-row from the top to bottom (low row
    // index to high row index), omitting lower, off-diagonal components.
    repeated float kflat = 2 [packed=true];
}

message Track {
    repeated TrackSegment segment = 1 [packed=true];
    repeated uint64 observation = 2 [packed=true];
}

////// SECONDARY DATA MODEL MESSAGES //////

message TrackSegment {
    // start of segment in mm/ns
    optional XYZTD vertex = 1;
    repeated RandVar vertexnoise = 2 [packed=true];
    // momentum normalized to the magnitude of the charge (GeV)
    optional XYZD poq = 3;
    repeated RandVar poqnoise = 4 [packed=true];
    // magnetic field at the vertex (T)
    optional XYZD magfield = 9;
    // sign of the track charge
    optional float chargesign = 7;
    // length of the segment in mm
    optional float length = 8;

    // DEPRECATED
    optional XYZD curvature = 5;
    repeated RandVar curvaturenoise = 6;
}

// position with detailed noise
message ObservedPos {
    // spatial in mm and time in ns
    optional XYZTD mean = 1;
    // These RandVars describe independent random noise contributions, and
    // repeated RandVars imply addition, or alternatively a convolution of
    // their distributions.  The contributions must combine to span the full
    // 4-dimensional space, so the number of contributions must be >= 4.
    repeated RandVar noise = 2 [packed=true];
    // "weightmod" describes additional weight to be applied to this position.
    // For the case of multiple possible positions, it is implied that by
    // default each position is equally likely.  This can be changed by adding
    // weight to positions.  To make one position twice as likely as a position
    // without a weight modifier, set weightmod to +1.
    optional float weightmod = 3;
}

// random variable with a specified distribution along an axis defined in XYZT
message RandVar {
    enum Distribution {
        NORMAL = 0;
        UNIFORM = 1;
    }
    optional Distribution dist = 2;
    // spatial in mm and time in ns
    optional XYZTF sigma = 3;
}

message XYZTD {
    optional double x = 1;
    optional double y = 2;
    optional double z = 3;
    optional double t = 4;
}

message XYZTF {
    optional float x = 1;
    optional float y = 2;
    optional float z = 3;
    optional float t = 4;
}

message XYZD {
    optional double x = 1;
    optional double y = 2;
    optional double z = 3;
}

message XYZF {
    optional float x = 1;
    optional float y = 2;
    optional float z = 3;
}
