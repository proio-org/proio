syntax = "proto2";
package proio.model.mc;
option go_package = "github.com/proio-org/go-proio/model/mc";
option java_package = "proio.model";
option java_outer_classname = "Mc";

message Particle {
    // ProIO entry identifiers that point to parent Particles
    repeated uint64 parent = 1;
    // ProIO entry identifiers that point to child Particles
    repeated uint64 child = 2;
    // PDG code
    optional sint32 pdg = 3;
    // position in mm and time in ns
    optional XYZTF vertex = 4;
    // 3-momentum in GeV
    optional XYZF p = 5;
    // energy in GeV
    optional float energy = 6;
    // mass in GeV
    optional float mass = 7;
    // charge in units of elementary charge / 3
    optional sint32 charge = 8;
    // 2 *spin + 1
    optional sint32 spin = 9;
    // status code
    optional sint32 status = 10;
    // barcode
    optional sint32 barcode= 11;
}

// This message is for general Monte Carlo generators.
message MCParameters {
    optional uint64 number = 1;
    optional int32 processid = 2;
    optional double weight = 3;
    // keep extra data as key-value (int)
    map<string, ArrayInt> int_extra = 4;
    // keep extra data as key-value (double)
    map<string, ArrayDouble> float_extra = 5;
}

// array of signed integers
message ArrayInt {
    repeated sint32 value = 1;
}

// array of floating point values
message ArrayDouble {
    repeated double value = 1;
}

// This block is only for Pythia8.
message Pythia8Parameters {
    optional double weight_sum = 1;
    optional double merging_weight = 2;
    //transverse momentum
    optional double pt_hat = 3;
    optional double alpha_em = 4;
    optional double alpha_s = 5;
    // Q-scale used in evaluation of PDF’s (in GeV)
    optional double scale_q_fac = 6;
    // event weight
    optional double weight = 7;
    // fraction of beam momentum carried by first parton (”beam side”)
    optional double x1 = 8;
    // fraction of beam momentum carried by second parton (”target side”)
    optional double x2 = 9;
    // flavour code of first parton
    optional uint64 id1 = 10;
    // flavour code of second parton
    optional uint64 id2 = 11;
}

// Auxiliary message types
message XYZTF {
    optional float x = 1;
    optional float y = 2;
    optional float z = 3;
    optional float t = 4;
}

message XYZF {
    optional float x = 1;
    optional float y = 2;
    optional float z = 3;
}
